// clang-format off

//      v6 ---------------- v7         +---------e6--------+
//     /|                  /|         /|                  /|
//    / |                 / |        / |                 / |
//   /  |                /  |      e11 |               e10 |
//  /   |               /   |      /   |               /   |
// v2 ---------------- v3   |     +---------e2--------+    |
// |    |              |    |     |    e7             |    e5
// |    |              |    |     |    |              |    |
// |    |              |    |     |    |              |    |
// |    v4 ---------------- v5    |    +---------e4--------+
// |   /               |   /      e3  /               e1  /
// |  /                |  /       |  e8               |  e9
// | /                 | /        | /                 | /
// |/                  |/         |/                  |/
// v0 ---------------- v1         +---------e0--------+

uint vertexCounts[] = uint[](
    0, 3, 3, 4, 3, 4, 6, 5, 3, 6, 4, 5, 4, 5, 5, 4, 
    3, 4, 6, 5, 6, 5, 9, 6, 6, 7, 7, 6, 7, 6, 8, 5, 
    3, 6, 4, 5, 6, 7, 7, 6, 6, 9, 5, 6, 7, 8, 6, 5, 
    4, 5, 5, 4, 7, 6, 8, 5, 7, 8, 6, 5, 8, 7, 7, 4, 
    3, 6, 6, 7, 4, 5, 7, 6, 6, 9, 7, 8, 5, 6, 6, 5, 
    4, 5, 7, 6, 5, 4, 8, 5, 7, 8, 8, 7, 6, 5, 7, 4, 
    6, 9, 7, 8, 7, 8, 8, 7, 9, 12, 8, 9, 8, 9, 7, 6, 
    5, 6, 6, 5, 6, 5, 7, 4, 8, 9, 7, 6, 7, 6, 6, 3, 
    3, 6, 6, 7, 6, 7, 9, 8, 4, 7, 5, 6, 5, 6, 6, 5, 
    6, 7, 9, 8, 9, 8, 12, 9, 7, 8, 8, 7, 8, 7, 9, 6, 
    4, 7, 5, 6, 7, 8, 8, 7, 5, 8, 4, 5, 6, 7, 5, 4, 
    5, 6, 6, 5, 8, 7, 9, 6, 6, 7, 5, 4, 7, 6, 6, 3, 
    4, 7, 7, 8, 5, 6, 8, 7, 5, 8, 6, 7, 4, 5, 5, 4, 
    5, 6, 8, 7, 6, 5, 9, 6, 6, 7, 7, 6, 5, 4, 6, 3, 
    5, 8, 6, 7, 6, 7, 7, 6, 6, 9, 5, 6, 5, 6, 4, 3, 
    4, 5, 5, 4, 5, 4, 6, 3, 5, 6, 4, 3, 4, 3, 3, 0);

uint triangleCounts[] = uint[](
    0, 1, 1, 2, 1, 2, 4, 3, 1, 4, 2, 3, 2, 3, 3, 2, // 0 -
    1, 2, 4, 3, 4, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3, // 16 -
    1, 4, 2, 3, 2, 3, 3, 4, 4, 3, 3, 4, 3, 4, 4, 3, // 32 -
    2, 3, 3, 2, 3, 4, 4, 3, 3, 4, 4, 3, 4, 3, 3, 2, // 48 -
    1, 4, 2, 3, 2, 3, 3, 4, 4, 3, 3, 4, 3, 4, 4, 3, // 64 -
    2, 3, 3, 4, 3, 2, 4, 3, 3, 4, 4, 3, 4, 3, 3, 2, // 80 -
    4, 3, 3, 4, 3, 4, 4, 3, 3, 4, 4, 3, 4, 3, 3, 4, // 96 -
    3, 4, 4, 3, 4, 3, 3, 2, 4, 3, 3, 4, 3, 4, 2, 1, // 112 -
    1, 2, 4, 3, 4, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3, // 128 -
    4, 3, 3, 4, 3, 4, 4, 3, 3, 4, 4, 3, 4, 3, 3, 4, // 144 -
    2, 3, 3, 4, 3, 4, 4, 3, 3, 4, 2, 3, 4, 3, 3, 2, // 160 -
    3, 4, 4, 3, 4, 3, 3, 4, 4, 3, 3, 2, 3, 2, 4, 1, // 176 -
    2, 3, 3, 4, 3, 4, 4, 3, 3, 4, 4, 3, 2, 3, 3, 2, // 192 -
    3, 4, 4, 3, 4, 3, 3, 4, 4, 3, 3, 2, 3, 2, 4, 1, // 208 -
    3, 4, 4, 3, 4, 3, 3, 2, 4, 3, 3, 4, 3, 4, 2, 1, // 224 -
    2, 3, 3, 2, 3, 2, 4, 1, 3, 4, 2, 1, 2, 1, 1, 0);// 240 -

uvec2 edgeVertexIndices[] = uvec2[](
    uvec2(0, 1), uvec2(1, 3), uvec2(3, 2), uvec2(2, 0), 
    uvec2(4, 5), uvec2(5, 7), uvec2(7, 6), uvec2(6, 4), 
    uvec2(0, 4), uvec2(1, 5), uvec2(3, 7), uvec2(2, 6));

// Stored values are edge index
int triangleTable[][] = int[][](
    int[](-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), // 0
    int[](0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1),
    int[](0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
    int[](3, 8, 1, 1, 8, 9, -1, -1, -1, -1, -1, -1),
    int[](2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1),
    int[](8, 0, 11, 11, 0, 2, -1, -1, -1, -1, -1, -1),
    int[](3, 11, 9, 9, 0, 3, 1, 9, 11, 11, 2, 1),
    int[](11, 1, 2, 11, 9, 1, 11, 8, 9, -1, -1, -1),
    int[](1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1),
    int[](10, 1, 0, 0, 8, 10, 8, 3, 2, 2, 10, 8),
    int[](10, 2, 9, 9, 2, 0, -1, -1, -1, -1, -1, -1),      // 10
    int[](8, 2, 3, 8, 10, 2, 8, 9, 10, -1, -1, -1),
    int[](11, 3, 10, 10, 3, 1, -1, -1, -1, -1, -1, -1),
    int[](10, 0, 1, 10, 8, 0, 10, 11, 8, -1, -1, -1),
    int[](9, 3, 0, 9, 11, 3, 9, 10, 11, -1, -1, -1),
    int[](8, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1),
    int[](4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1),
    int[](7, 4, 3, 3, 4, 0, -1, -1, -1, -1, -1, -1),
    int[](7, 8, 0, 0, 1, 7, 1, 9, 4, 4, 7, 1),
    int[](1, 4, 9, 1, 7, 4, 1, 3, 7, -1, -1, -1),
    int[](2, 3, 8, 8, 4, 2, 4, 7, 11, 11, 2, 4),      // 20
    int[](4, 11, 7, 4, 2, 11, 4, 0, 2, -1, -1, -1),
    int[](0, 9, 1, 8, 7, 4, 11, 3, 2, -1, -1, -1),
    int[](7, 4, 11, 11, 4, 2, 2, 4, 9, 2, 9, 1),
    int[](4, 8, 7, 2, 1, 10, -1, -1, -1, -1, -1, -1),
    int[](7, 4, 3, 3, 4, 0, 10, 2, 1, -1, -1, -1),
    int[](10, 2, 9, 9, 2, 0, 7, 4, 8, -1, -1, -1),
    int[](10, 2, 3, 10, 3, 4, 3, 7, 4, 9, 10, 4),
    int[](1, 10, 3, 3, 10, 11, 4, 8, 7, -1, -1, -1),
    int[](10, 11, 1, 11, 7, 4, 1, 11, 4, 1, 4, 0),
    int[](7, 4, 8, 9, 3, 0, 9, 11, 3, 9, 10, 11), // 30
    int[](7, 4, 11, 4, 9, 11, 9, 10, 11, -1, -1, -1),
    int[](9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1),
    int[](3, 0, 9, 9, 5, 3, 5, 4, 8, 8, 3, 5),
    int[](4, 5, 0, 0, 5, 1, -1, -1, -1, -1, -1, -1),
    int[](5, 8, 4, 5, 3, 8, 5, 1, 3, -1, -1, -1),
    int[](9, 4, 5, 11, 3, 2, -1, -1, -1, -1, -1, -1),
    int[](2, 11, 0, 0, 11, 8, 5, 9, 4, -1, -1, -1),
    int[](4, 5, 0, 0, 5, 1, 11, 3, 2, -1, -1, -1),
    int[](5, 1, 4, 1, 2, 11, 4, 1, 11, 4, 11, 8),
    int[](4, 9, 1, 1, 2, 4, 2, 10, 5, 5, 4, 2), // 40
    int[](9, 4, 5, 0, 3, 8, 2, 1, 10, -1, -1, -1),
    int[](2, 5, 10, 2, 4, 5, 2, 0, 4, -1, -1, -1),
    int[](10, 2, 5, 5, 2, 4, 4, 2, 3, 4, 3, 8),
    int[](11, 3, 10, 10, 3, 1, 4, 5, 9, -1, -1, -1),
    int[](4, 5, 9, 10, 0, 1, 10, 8, 0, 10, 11, 8),
    int[](11, 3, 0, 11, 0, 5, 0, 4, 5, 10, 11, 5),
    int[](4, 5, 8, 5, 10, 8, 10, 11, 8, -1, -1, -1),
    int[](8, 7, 9, 9, 7, 5, -1, -1, -1, -1, -1, -1),
    int[](3, 9, 0, 3, 5, 9, 3, 7, 5, -1, -1, -1),
    int[](7, 0, 8, 7, 1, 0, 7, 5, 1, -1, -1, -1), // 50
    int[](7, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1),
    int[](5, 9, 7, 7, 9, 8, 2, 11, 3, -1, -1, -1),
    int[](2, 11, 7, 2, 7, 9, 7, 5, 9, 0, 2, 9),
    int[](2, 11, 3, 7, 0, 8, 7, 1, 0, 7, 5, 1),
    int[](2, 11, 1, 11, 7, 1, 7, 5, 1, -1, -1, -1),
    int[](8, 7, 9, 9, 7, 5, 2, 1, 10, -1, -1, -1),
    int[](10, 2, 1, 3, 9, 0, 3, 5, 9, 3, 7, 5),  
    int[](7, 5, 8, 5, 10, 2, 8, 5, 2, 8, 2, 0),  
    int[](10, 2, 5, 2, 3, 5, 3, 7, 5, -1, -1, -1),  
    int[](8, 7, 5, 8, 5, 9, 11, 3, 10, 3, 1, 10), // 60
    int[](5, 11, 7, 10, 11, 5, 1, 9, 0, -1, -1, -1),  
    int[](11, 5, 10, 7, 5, 11, 8, 3, 0, -1, -1, -1),  
    int[](5, 11, 7, 10, 11, 5, -1, -1, -1, -1, -1, -1),  
    int[](6, 7, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1),  
    int[](0, 8, 7, 7, 6, 0, 6, 11, 3, 3, 0, 6),  
    int[](6, 7, 11, 0, 9, 1, -1, -1, -1, -1, -1, -1),  
    int[](9, 1, 8, 8, 1, 3, 6, 7, 11, -1, -1, -1),  
    int[](3, 2, 7, 7, 2, 6, -1, -1, -1, -1, -1, -1),  
    int[](0, 7, 8, 0, 6, 7, 0, 2, 6, -1, -1, -1),  
    int[](6, 7, 2, 2, 7, 3, 9, 1, 0, -1, -1, -1), // 70
    int[](6, 7, 8, 6, 8, 1, 8, 9, 1, 2, 6, 1),  
    int[](1, 2, 11, 11, 7, 1, 7, 6, 10, 10, 1, 7),  
    int[](3, 8, 0, 11, 6, 7, 10, 2, 1, -1, -1, -1),  
    int[](0, 9, 2, 2, 9, 10, 7, 11, 6, -1, -1, -1),  
    int[](6, 7, 11, 8, 2, 3, 8, 10, 2, 8, 9, 10),  
    int[](7, 10, 6, 7, 1, 10, 7, 3, 1, -1, -1, -1),  
    int[](8, 0, 7, 7, 0, 6, 6, 0, 1, 6, 1, 10),  
    int[](7, 3, 6, 3, 0, 9, 6, 3, 9, 6, 9, 10),  
    int[](6, 7, 10, 7, 8, 10, 8, 9, 10, -1, -1, -1),  
    int[](11, 6, 8, 8, 6, 4, -1, -1, -1, -1, -1, -1),  // 80
    int[](6, 3, 11, 6, 0, 3, 6, 4, 0, -1, -1, -1),  
    int[](11, 6, 8, 8, 6, 4, 1, 0, 9, -1, -1, -1),  
    int[](1, 3, 9, 3, 11, 6, 9, 3, 6, 9, 6, 4),  
    int[](2, 8, 3, 2, 4, 8, 2, 6, 4, -1, -1, -1),  
    int[](4, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1),  
    int[](9, 1, 0, 2, 8, 3, 2, 4, 8, 2, 6, 4),  
    int[](9, 1, 4, 1, 2, 4, 2, 6, 4, -1, -1, -1),  
    int[](4, 8, 6, 6, 8, 11, 1, 10, 2, -1, -1, -1),  
    int[](1, 10, 2, 6, 3, 11, 6, 0, 3, 6, 4, 0),  
    int[](11, 6, 4, 11, 4, 8, 10, 2, 9, 2, 0, 9),  // 90
    int[](10, 4, 9, 6, 4, 10, 11, 2, 3, -1, -1, -1),  
    int[](4, 8, 3, 4, 3, 10, 3, 1, 10, 6, 4, 10),  
    int[](1, 10, 0, 10, 6, 0, 6, 4, 0, -1, -1, -1),  
    int[](4, 10, 6, 9, 10, 4, 0, 8, 3, -1, -1, -1),  
    int[](4, 10, 6, 9, 10, 4, -1, -1, -1, -1, -1, -1),  
    int[](11, 7, 4, 4, 9, 11, 9, 5, 6, 6, 11, 9),  
    int[](4, 5, 9, 7, 11, 6, 3, 8, 0, -1, -1, -1),  
    int[](1, 0, 5, 5, 0, 4, 11, 6, 7, -1, -1, -1),  
    int[](11, 6, 7, 5, 8, 4, 5, 3, 8, 5, 1, 3),  
    int[](3, 2, 7, 7, 2, 6, 9, 4, 5, -1, -1, -1),  // 100
    int[](5, 9, 4, 0, 7, 8, 0, 6, 7, 0, 2, 6),  
    int[](3, 2, 6, 3, 6, 7, 1, 0, 5, 0, 4, 5),  
    int[](6, 1, 2, 5, 1, 6, 4, 7, 8, -1, -1, -1),  
    int[](10, 2, 1, 6, 7, 11, 4, 5, 9, -1, -1, -1),  
    int[](0, 3, 8, 4, 5, 9, 11, 6, 7, 10, 2, 1),  
    int[](7, 11, 6, 2, 5, 10, 2, 4, 5, 2, 0, 4),  
    int[](8, 4, 7, 5, 10, 6, 3, 11, 2, -1, -1, -1),  
    int[](9, 4, 5, 7, 10, 6, 7, 1, 10, 7, 3, 1),  
    int[](10, 6, 5, 7, 8, 4, 1, 9, 0, -1, -1, -1),  
    int[](4, 3, 0, 7, 3, 4, 6, 5, 10, -1, -1, -1),  // 110
    int[](8, 4, 5, 5, 10, 8, 10, 6, 7, 7, 8, 10),  
    int[](9, 6, 5, 9, 11, 6, 9, 8, 11, -1, -1, -1),  
    int[](11, 6, 3, 3, 6, 0, 0, 6, 5, 0, 5, 9),  
    int[](11, 6, 5, 11, 5, 0, 5, 1, 0, 8, 11, 0),  
    int[](11, 6, 3, 6, 5, 3, 5, 1, 3, -1, -1, -1),  
    int[](9, 8, 5, 8, 3, 2, 5, 8, 2, 5, 2, 6),  
    int[](5, 9, 6, 9, 0, 6, 0, 2, 6, -1, -1, -1),  
    int[](1, 6, 5, 2, 6, 1, 3, 0, 8, -1, -1, -1),  
    int[](1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1),  
    int[](2, 1, 10, 9, 6, 5, 9, 11, 6, 9, 8, 11),  // 120
    int[](9, 0, 1, 3, 11, 2, 5, 10, 6, -1, -1, -1),  
    int[](11, 0, 8, 2, 0, 11, 10, 6, 5, -1, -1, -1),  
    int[](5, 10, 2, 2, 3, 5, 3, 11, 6, 6, 5, 3),  
    int[](1, 8, 3, 9, 8, 1, 5, 10, 6, -1, -1, -1),  
    int[](6, 5, 9, 9, 0, 6, 0, 1, 10, 10, 6, 0),  
    int[](8, 3, 0, 5, 10, 6, -1, -1, -1, -1, -1, -1),  
    int[](6, 5, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1),  
    int[](10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1),  
    int[](0, 3, 8, 6, 10, 5, -1, -1, -1, -1, -1, -1),  
    int[](6, 5, 9, 9, 0, 6, 0, 1, 10, 10, 6, 0),  // 130
    int[](3, 8, 1, 1, 8, 9, 6, 10, 5, -1, -1, -1),  
    int[](5, 10, 2, 2, 3, 5, 3, 11, 6, 6, 5, 3),  
    int[](8, 0, 11, 11, 0, 2, 5, 6, 10, -1, -1, -1),  
    int[](1, 0, 9, 2, 11, 3, 6, 10, 5, -1, -1, -1),  
    int[](5, 6, 10, 11, 1, 2, 11, 9, 1, 11, 8, 9),  
    int[](5, 6, 1, 1, 6, 2, -1, -1, -1, -1, -1, -1),  
    int[](5, 6, 1, 1, 6, 2, 8, 0, 3, -1, -1, -1),  
    int[](6, 9, 5, 6, 0, 9, 6, 2, 0, -1, -1, -1),  
    int[](6, 2, 5, 2, 3, 8, 5, 2, 8, 5, 8, 9),  
    int[](3, 6, 11, 3, 5, 6, 3, 1, 5, -1, -1, -1),  // 140
    int[](8, 0, 1, 8, 1, 6, 1, 5, 6, 11, 8, 6),  
    int[](11, 3, 6, 6, 3, 5, 5, 3, 0, 5, 0, 9),  
    int[](5, 6, 9, 6, 11, 9, 11, 8, 9, -1, -1, -1),  
    int[](8, 4, 5, 5, 10, 8, 10, 6, 7, 7, 8, 10),  
    int[](0, 3, 4, 4, 3, 7, 10, 5, 6, -1, -1, -1),  
    int[](5, 6, 10, 4, 8, 7, 0, 9, 1, -1, -1, -1),  
    int[](6, 10, 5, 1, 4, 9, 1, 7, 4, 1, 3, 7),  
    int[](7, 4, 8, 6, 10, 5, 2, 11, 3, -1, -1, -1),  
    int[](10, 5, 6, 4, 11, 7, 4, 2, 11, 4, 0, 2),  
    int[](4, 8, 7, 6, 10, 5, 3, 2, 11, 1, 0, 9),  // 150
    int[](1, 2, 10, 11, 7, 6, 9, 5, 4, -1, -1, -1),  
    int[](2, 1, 6, 6, 1, 5, 8, 7, 4, -1, -1, -1),  
    int[](0, 3, 7, 0, 7, 4, 2, 1, 6, 1, 5, 6),  
    int[](8, 7, 4, 6, 9, 5, 6, 0, 9, 6, 2, 0),  
    int[](7, 2, 3, 6, 2, 7, 5, 4, 9, -1, -1, -1),  
    int[](4, 8, 7, 3, 6, 11, 3, 5, 6, 3, 1, 5),  
    int[](5, 0, 1, 4, 0, 5, 7, 6, 11, -1, -1, -1),  
    int[](9, 5, 4, 6, 11, 7, 0, 8, 3, -1, -1, -1),  
    int[](11, 7, 4, 4, 9, 11, 9, 5, 6, 6, 11, 9),  
    int[](6, 10, 4, 4, 10, 9, -1, -1, -1, -1, -1, -1),  // 160
    int[](6, 10, 4, 4, 10, 9, 3, 8, 0, -1, -1, -1),  
    int[](0, 10, 1, 0, 6, 10, 0, 4, 6, -1, -1, -1),  
    int[](6, 10, 1, 6, 1, 8, 1, 3, 8, 4, 6, 8),  
    int[](9, 4, 10, 10, 4, 6, 3, 2, 11, -1, -1, -1),  
    int[](2, 11, 8, 2, 8, 0, 6, 10, 4, 10, 9, 4),  
    int[](11, 3, 2, 0, 10, 1, 0, 6, 10, 0, 4, 6),  
    int[](6, 8, 4, 11, 8, 6, 2, 10, 1, -1, -1, -1),  
    int[](4, 1, 9, 4, 2, 1, 4, 6, 2, -1, -1, -1),  
    int[](3, 8, 0, 4, 1, 9, 4, 2, 1, 4, 6, 2),  
    int[](6, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1),  // 170
    int[](3, 8, 2, 8, 4, 2, 4, 6, 2, -1, -1, -1),  
    int[](4, 6, 9, 6, 11, 3, 9, 6, 3, 9, 3, 1),  
    int[](8, 6, 11, 4, 6, 8, 9, 0, 1, -1, -1, -1),  
    int[](11, 3, 6, 3, 0, 6, 0, 4, 6, -1, -1, -1),  
    int[](8, 6, 11, 4, 6, 8, -1, -1, -1, -1, -1, -1),  
    int[](10, 7, 6, 10, 8, 7, 10, 9, 8, -1, -1, -1),  
    int[](3, 7, 0, 7, 6, 10, 0, 7, 10, 0, 10, 9),  
    int[](6, 10, 7, 7, 10, 8, 8, 10, 1, 8, 1, 0),  
    int[](6, 10, 7, 10, 1, 7, 1, 3, 7, -1, -1, -1),  
    int[](3, 2, 11, 10, 7, 6, 10, 8, 7, 10, 9, 8),  // 180
    int[](2, 9, 0, 10, 9, 2, 6, 11, 7, -1, -1, -1),  
    int[](0, 8, 3, 7, 6, 11, 1, 2, 10, -1, -1, -1),  
    int[](1, 2, 11, 11, 7, 1, 7, 6, 10, 10, 1, 7),  
    int[](2, 1, 9, 2, 9, 7, 9, 8, 7, 6, 2, 7),  
    int[](2, 7, 6, 3, 7, 2, 0, 1, 9, -1, -1, -1),  
    int[](8, 7, 0, 7, 6, 0, 6, 2, 0, -1, -1, -1),  
    int[](7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1),  
    int[](8, 1, 9, 3, 1, 8, 11, 7, 6, -1, -1, -1),  
    int[](11, 7, 6, 1, 9, 0, -1, -1, -1, -1, -1, -1),  
    int[](0, 8, 7, 7, 6, 0, 6, 11, 3, 3, 0, 6),  // 190
    int[](11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1),  
    int[](7, 11, 5, 5, 11, 10, -1, -1, -1, -1, -1, -1),  
    int[](10, 5, 11, 11, 5, 7, 0, 3, 8, -1, -1, -1),  
    int[](7, 11, 5, 5, 11, 10, 0, 9, 1, -1, -1, -1),  
    int[](7, 11, 10, 7, 10, 5, 3, 8, 1, 8, 9, 1),  
    int[](5, 2, 10, 5, 3, 2, 5, 7, 3, -1, -1, -1),  
    int[](5, 7, 10, 7, 8, 0, 10, 7, 0, 10, 0, 2),  
    int[](0, 9, 1, 5, 2, 10, 5, 3, 2, 5, 7, 3),  
    int[](9, 7, 8, 5, 7, 9, 10, 1, 2, -1, -1, -1),  
    int[](1, 11, 2, 1, 7, 11, 1, 5, 7, -1, -1, -1),  // 200
    int[](8, 0, 3, 1, 11, 2, 1, 7, 11, 1, 5, 7),  
    int[](7, 11, 2, 7, 2, 9, 2, 0, 9, 5, 7, 9),  
    int[](7, 9, 5, 8, 9, 7, 3, 11, 2, -1, -1, -1),  
    int[](3, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1),  
    int[](8, 0, 7, 0, 1, 7, 1, 5, 7, -1, -1, -1),  
    int[](0, 9, 3, 9, 5, 3, 5, 7, 3, -1, -1, -1),  
    int[](9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1),  
    int[](8, 5, 4, 8, 10, 5, 8, 11, 10, -1, -1, -1),  
    int[](0, 3, 11, 0, 11, 5, 11, 10, 5, 4, 0, 5),  
    int[](1, 0, 9, 8, 5, 4, 8, 10, 5, 8, 11, 10),  // 210
    int[](10, 3, 11, 1, 3, 10, 9, 5, 4, -1, -1, -1),  
    int[](3, 2, 8, 8, 2, 4, 4, 2, 10, 4, 10, 5),  
    int[](10, 5, 2, 5, 4, 2, 4, 0, 2, -1, -1, -1),  
    int[](5, 4, 9, 8, 3, 0, 10, 1, 2, -1, -1, -1),  
    int[](4, 9, 1, 1, 2, 4, 2, 10, 5, 5, 4, 2),  
    int[](8, 11, 4, 11, 2, 1, 4, 11, 1, 4, 1, 5),  
    int[](0, 5, 4, 1, 5, 0, 2, 3, 11, -1, -1, -1),  
    int[](0, 11, 2, 8, 11, 0, 4, 9, 5, -1, -1, -1),  
    int[](5, 4, 9, 2, 3, 11, -1, -1, -1, -1, -1, -1),  
    int[](4, 8, 5, 8, 3, 5, 3, 1, 5, -1, -1, -1),  // 220
    int[](0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1),  
    int[](3, 0, 9, 9, 5, 3, 5, 4, 8, 8, 3, 5),  
    int[](5, 4, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1),  
    int[](11, 4, 7, 11, 9, 4, 11, 10, 9, -1, -1, -1),  
    int[](0, 3, 8, 11, 4, 7, 11, 9, 4, 11, 10, 9),  
    int[](11, 10, 7, 10, 1, 0, 7, 10, 0, 7, 0, 4),  
    int[](3, 10, 1, 11, 10, 3, 7, 8, 4, -1, -1, -1),  
    int[](3, 2, 10, 3, 10, 4, 10, 9, 4, 7, 3, 4),  
    int[](9, 2, 10, 0, 2, 9, 8, 4, 7, -1, -1, -1),  
    int[](3, 4, 7, 0, 4, 3, 1, 2, 10, -1, -1, -1),  // 230
    int[](7, 8, 4, 10, 1, 2, -1, -1, -1, -1, -1, -1),  
    int[](7, 11, 4, 4, 11, 9, 9, 11, 2, 9, 2, 1),  
    int[](1, 9, 0, 4, 7, 8, 2, 3, 11, -1, -1, -1),  
    int[](7, 11, 4, 11, 2, 4, 2, 0, 4, -1, -1, -1),  
    int[](2, 3, 8, 8, 4, 2, 4, 7, 11, 11, 2, 4),  
    int[](9, 4, 1, 4, 7, 1, 7, 3, 1, -1, -1, -1),  
    int[](7, 8, 0, 0, 1, 7, 1, 9, 4, 4, 7, 1),  
    int[](3, 4, 7, 0, 4, 3, -1, -1, -1, -1, -1, -1),  
    int[](7, 8, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1),  
    int[](11, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1),  // 240
    int[](0, 3, 9, 3, 11, 9, 11, 10, 9, -1, -1, -1),  
    int[](1, 0, 10, 0, 8, 10, 8, 11, 10, -1, -1, -1),  
    int[](10, 3, 11, 1, 3, 10, -1, -1, -1, -1, -1, -1),  
    int[](3, 2, 8, 2, 10, 8, 10, 9, 8, -1, -1, -1),  
    int[](9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1),  
    int[](10, 1, 0, 0, 8, 10, 8, 3, 2, 2, 10, 8),  
    int[](2, 10, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1),  
    int[](2, 1, 11, 1, 9, 11, 9, 8, 11, -1, -1, -1),  
    int[](3, 11, 9, 9, 0, 3, 1, 9, 11, 11, 2, 1),  
    int[](11, 0, 8, 2, 0, 11, -1, -1, -1, -1, -1, -1),  // 250
    int[](3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1),  
    int[](1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1),  
    int[](1, 9, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1),  
    int[](8, 3, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1),  
    int[](-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1));


uint computeMarchingCubesCase(uvec3 cellIndices)
{
    float isoValue = pushConstants.isoValue;
    uint mcCase = 0;
    mcCase += uint(densities[to1D(cellIndices + uvec3(0, 0, 0), N + 1)] > isoValue) << 0;
    mcCase += uint(densities[to1D(cellIndices + uvec3(1, 0, 0), N + 1)] > isoValue) << 1;
    mcCase += uint(densities[to1D(cellIndices + uvec3(0, 1, 0), N + 1)] > isoValue) << 2;
    mcCase += uint(densities[to1D(cellIndices + uvec3(1, 1, 0), N + 1)] > isoValue) << 3;
    mcCase += uint(densities[to1D(cellIndices + uvec3(0, 0, 1), N + 1)] > isoValue) << 4;
    mcCase += uint(densities[to1D(cellIndices + uvec3(1, 0, 1), N + 1)] > isoValue) << 5;
    mcCase += uint(densities[to1D(cellIndices + uvec3(0, 1, 1), N + 1)] > isoValue) << 6;
    mcCase += uint(densities[to1D(cellIndices + uvec3(1, 1, 1), N + 1)] > isoValue) << 7;
    return mcCase;
}

vec3[8] computeVertexPositions(uvec3 cellIndices)
{
    vec3 cellOrigin = areaOrigin + cellSize * cellIndices;
    return vec3[8](
        cellOrigin + vec3(0, 0, 0), cellOrigin + vec3(cellSize.x, 0, 0),
        cellOrigin + vec3(0, cellSize.y, 0), cellOrigin + vec3(cellSize.x, cellSize.y, 0),
        cellOrigin + vec3(0, 0, cellSize.z), cellOrigin + vec3(cellSize.x, 0, cellSize.z),
        cellOrigin + vec3(0, cellSize.y, cellSize.z),
        cellOrigin + vec3(cellSize.x, cellSize.y, cellSize.z));
}

float easeInOutQuad(float t) {
    if (t < 0.5) {
        return 2.0 * t * t;
    } else {
        return -1.0 + (4.0 - 2.0 * t) * t;
    }
}

float computeInterpolationFactor(float dens0, float dens1) {
    float isoValue = pushConstants.isoValue;
    if (abs(dens0 - isoValue) < 0.00001 && abs(dens1 - isoValue) < 0.00001) {
        return 0.5;
    }

    if (abs(dens0 - dens1) > 0.00001) {
        float t = clamp((isoValue - dens0) / (dens1 - dens0), 0.0, 1.0);
        return t;
    }

    return dens0 < isoValue ? 1.0 : 0.0;
}


// One of dens0 and dens1 is positive and the other is zero.
vec3 computeBoundaryPosition(in vec3 pos0, in vec3 pos1, in float dens0, in float dens1)
{
    return mix(pos0, pos1, computeInterpolationFactor(dens0, dens1));
}

const uvec3 vertexIndexToOffset[8] = uvec3[](uvec3(0, 0, 0),
                                             uvec3(1, 0, 0),
                                             uvec3(0, 1, 0),
                                             uvec3(1, 1, 0),
                                             uvec3(0, 0, 1),
                                             uvec3(1, 0, 1),
                                             uvec3(0, 1, 1),
                                             uvec3(1, 1, 1));

vec2 getDensitiesForEdgeVertices(uvec3 cellIndices, int edgeIndex)
{
    uvec2 vertexIndices = edgeVertexIndices[edgeIndex];
    float dens0 = densities[to1D(cellIndices + vertexIndexToOffset[vertexIndices[0]], N + 1)];
    float dens1 = densities[to1D(cellIndices + vertexIndexToOffset[vertexIndices[1]], N + 1)];
    return vec2(dens0, dens1);
}

vec3 computeVertexPositionOnEdge(uvec3 cellIndices, int edgeIndex, vec3 vertexPositions[8])
{
    uvec2 vertexIndices = edgeVertexIndices[edgeIndex];
    vec3 pos0 = vertexPositions[vertexIndices[0]];
    vec3 pos1 = vertexPositions[vertexIndices[1]];
    vec2 dens = getDensitiesForEdgeVertices(cellIndices, edgeIndex);
    return computeBoundaryPosition(pos0, pos1, dens[0], dens[1]);
}
